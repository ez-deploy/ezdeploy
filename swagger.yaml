consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
swagger: "2.0"
info:
  description: apiserver
  title: ez-deploy apiserver.
  version: 1.0.0
securityDefinitions:
  key:
    type: apiKey
    name: Cookie
    in: header
security:
  - key: []
paths:
  /user/create:
    post:
      tags:
        - Identity
      operationId: CreateUser
      description: Create User
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserInfo'
      responses:
        "201":
          description: Create User Success
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: Create User Failed, cause user exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /user/login:
    post:
      tags:
        - Identity
      operationId: Login
      description: User Login
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserInfo'
      responses:
        "200":
          description: Login Success, return user info.
          headers:
            Set-Cookie:
              type: string
              description: Set-Cookie, set token
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Login Failed
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /user/logout:
    get:
      tags:
        - Identity
      operationId: Logout
      description: Logout
      responses:
        "200":
          description: Logout Success
        "401":
          description: Logout Failed, no login
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /whoami:
    get:
      tags:
        - Identity
      operationId: Whoami
      description: Get Current User's Info
      responses:
        "200":
          description: Get Current User's Info Success
          schema:
            $ref: '#/definitions/UserInfo'
  /project/create:
    post:
      tags:
        - Project
      operationId: CreateProject
      description: Create Project
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ProjectInfo'
      responses:
        "201":
          description: Create Project Success, return project info.
          schema:
            $ref: '#/definitions/ProjectInfo'
        "409":
          description: Create Project Failed, cause project exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /project/get:
    get:
      tags:
        - Project
      operationId: GetProject
      description: Get Project
      parameters:
      - name: id
        type: integer
        in: query
        required: true
      responses:
        "200":
          description: List All Projects Success, return project info. (project name, project id, project description)
          schema:
            $ref: '#/definitions/ProjectInfo'
        "404":
          description: Get Project Failed, cause project not exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/create:
    post:
      tags:
        - Service
      operationId: CreateService
      description: Create Service
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ServiceInfo'
      responses:
        "201":
          description: Create Service Success, return service info.
          schema:
            $ref: '#/definitions/ServiceInfo'
        "403":
          description: Create Service Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: Create Service Failed, cause service exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/list:
    get:
      tags:
        - Service
      operationId: ListService
      description: List Service by project ID, service ID, service name.
      parameters:
      - name: project_id
        type: integer
        in: query
      - name: service_id
        type: integer
        in: query
      - name: service_name
        type: string
        in: query
      responses:
        "200":
          description: List All Services Success, return service info. (service name, service id, service description)
          schema:
            type: object
            properties:
              services:
                type: array
                items:
                  $ref: '#/definitions/ServiceInfo'
        "403":
          description: List Service Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/delete:
    delete:
      tags:
        - Service
      operationId: DeleteService
      description: Delete Service
      parameters:
      - name: id
        type: integer
        in: query
        required: true
      responses:
        "200":
          description: Delete Service Success, return service info.
          schema:
            $ref: '#/definitions/ServiceInfo'
        "403":
          description: Delete Service Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500": 
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/update/deploy:
    put:
      tags:
        - Service
      operationId: UpdateServiceVersion
      description: Update Service Version
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ServiceInfo'
      responses:
        "200":
          description: Update Service Version Success, return service info.
          schema:
            $ref: '#/definitions/ServiceInfo'
        "403":
          description: Update Service Version Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/update/desc:
    put:
      tags:
        - Service
      operationId: UpdateServiceDescription
      description: Update Service Description
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ServiceInfo'
      responses:
        "200":
          description: Update Service Description Success, return service info.
          schema:
            $ref: '#/definitions/ServiceInfo'
        "403":
          description: Update Service Description Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/version/create:
    post:
      tags:
        - Service
      operationId: CreateServiceVersion
      description: Create Service Version
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ServiceVersion'
      responses:
        "201":
          description: Create Service Version Success, return service version info.
          schema:
            $ref: '#/definitions/ServiceVersion'
        "403":
          description: Create Service Version Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: Create Service Version Failed, cause service version exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/version/get:
    get:
      tags:
        - Service
      operationId: GetServiceVersion
      description: get Service Version by version ID.
      parameters:
      - name: service_id
        type: integer
        in: query
        required: true
      - name: version_id
        type: integer
        in: query
        required: true
      responses:
        "200":
          description: List Service Version Success, return service version info.
          schema:
            $ref: '#/definitions/ServiceVersion'
        "403":
          description: List Service Version Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/version/list:
    get:
      tags:
        - Service
      operationId: ListServiceVersion
      description: List Service Version by service ID.
      parameters:
      - name: service_id
        type: integer
        in: query
        required: true
      responses:
        "200":
          description: List Service Version Success, return service version info.
          schema:
            type: object
            properties:
              versions:
                type: array
                items:
                  $ref: '#/definitions/ServiceVersion'
        "403":
          description: List Service Version Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /service/pod/list:
    get:
      tags:
        - Service
      operationId: ListServicePod
      description: List Service Pod by service ID.
      parameters:
      - name: service_id
        type: integer
        in: query
        required: true
      responses:
        "200":
          description: List Service Pod Success, return service pod info.
          schema:
            type: object
            properties:
              pods:
                type: array
                items:
                  $ref: '#/definitions/PodInfo'
        "403":
          description: List Service Pod Failed, cause do not have permisssion
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /rbac/project/get:
    get:
      tags:
        - RBAC
      operationId: GetProjectRBAC
      description: Get Project RBAC
      parameters:
      - name: id
        type: integer
        description: projectID
        in: query
        required: true
      responses:
        "200":
          description: List All Projects RBAC Success, return project RBAC info.
          schema:
            $ref: '#/definitions/ProjectRole'
        "403":
          description: Get Project RBAC Failed, cause project not exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /rbac/user/get:
    get:
      tags:
        - RBAC
      operationId: GetUserRBAC
      description: Get User RBAC
      responses:
        "200":
          description: List All Users RBAC Success, return user RBAC info.
          schema:
            $ref: '#/definitions/UserRole'
        "404":
          description: Get User RBAC Failed, cause user not exist
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
definitions:
  UserInfo:
    type: object
    description: User's Info
    properties:
      id:
        description: id
        type: integer
        example: 1
      user_name:
        description: user's name, not unique
        type: string
        example: foobar
      password:
        description: password
        type: string
        example: foobar123
      email:
        description: email, unique
        type: string
        example: foo@bar.com
  Token:
    type: object
    description: Token Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      user_id:
        description: user's id
        type: integer
        example: 1
      value:
        description: token value
        type: string
        example: zxicgoiuasie
      type:
        description: token type
        type: string
        enum:
        - session
        - private
        - public
      create_at:
        description: create at, unix timestamp
        type: integer
        example: 1528894200
      update_at:
        description: create at, unix timestamp
        type: integer
        example: 1528894200
      expired_at:
        description: expired at, unix timestamp
        type: integer
        example: 1528994200
  Error:
    type: object
    properties:
      message:
        description: 错误信息
        type: string
        example: error message
  ProjectInfo:
    type: object
    description: Project Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      owner_id:
        description: owner's user_id
        type: integer
        example: 1
      name:
        description: project name
        type: string
        example: foobar
      description:
        description: project description
        type: string
        example: foobar project
      create_at:
        description: create at, unix timestamp
        type: integer
        example: 1528894200
      update_at:
        description: update at, unix timestamp
        type: integer
        example: 1528894200
  ServiceInfo:
    type: object
    description: Service Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      project_id:
        description: project id
        type: integer
        example: 1
      running:
        description: service is running or not
        type: boolean
        example: false
      version_id:
        description: version id
        type: integer
        example: 1
      name:
        description: service name
        type: string
        example: foobar
      description:
        description: service description
        type: string
        example: foobar service
      replica:
        description: number of pod replicas
        type: integer
        example: 16
      expose_type:
        description: expose service or not
        type: string
        enum:
        - incluster
        - nodeport
        - none
        example: service
      in_cluster_port:
        description: in-cluster expose port
        type: integer
        example: 80
      node_port:
        description: node-port expose port
        type: integer
        example: 80
      create_at:
        description: create at, unix timestamp
        type: integer
        example: 1528894200
      update_at:
        description: update at, unix timestamp
        type: integer
        example: 1528894200
  ServiceVersion:
    type: object
    description: Service Version Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      service_id:
        description: service id
        type: integer
        example: 1
      container_port:
        description: container port
        type: integer
        example: 80
      image:
        description: image name
        type: string
        example: busybox:latest
      name:
        description: version name
        type: string
        example: foobar
      description:
        description: version description
        type: string
        example: foobar version
      create_at:
        description: create at, unix timestamp
        type: integer
        example: 1528894200
  EnvironmentVariable:
    type: object
    description: Environment Variable for service deploy
    properties:
      id:
        description: id
        type: integer
        example: 1
      service_id:
        description: service id
        type: integer
        example: 1
      name:
        description: environment variable name
        type: string
        example: foobar
      value:
        description: environment variable value
        type: string
        example: foobar
  PodInfo:
    type: object
    description: Pod Object
    properties:
      name:
        description: unique name for pod
        type: string
        example: foobar-9zqb2
      status:
        description: pod status
        type: string
        example: Running
      restarts:
        description: restart time
        type: integer
        example: 0
      age:
        description: age of pod
        type: string
        example: 1m
      ip:
        description: ip of pod
        type: string
        example: "10.244.2.61"
      node:
        description: node name
        type: string
        example: minikube-m03
  RoleInfo:
    type: object
    description: Authority Role Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      project_id:
        description: project id
        type: integer
        example: 1
      role:
        description: role
        type: string
        example: admin
  RoleMember:
    type: object
    description: Authority Role Member Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      role_id:
        description: role id
        type: integer
        example: 1
      user_id:
        description: user id
        type: integer
        example: 1
  RolePermission:
    type: object
    description: Role Permissions Object
    properties:
      id:
        description: id
        type: integer
        example: 1
      role_id:
        description: AuthorityRole id
        type: integer
        example: 1
      permission:
        description: permission
        type: string
        enum:
        - read
        - write
        - delete
        - deploy
  RoleView:
    type: object
    description: Authority Role View Object
    properties:
      info:
        $ref: '#/definitions/RoleInfo'
      permissions:
        description: permissions
        type: array
        items:
          $ref: '#/definitions/RolePermission'
      members:
        description: members
        type: array
        items:
          $ref: '#/definitions/RoleMember'
  ProjectRole:
    type: object
    description: Project Role Object
    properties:
      project_id:
        description: project_id
        type: integer
        example: 1
      roles:
        description: roles
        type: array
        items:
          $ref: '#/definitions/RoleView'
  UserRole:
    type: object
    description: User Role Object
    properties:
      user_id:
        description: user_id
        type: integer
        example: 1
      roles:
        description: roles
        type: array
        items:
          $ref: '#/definitions/RoleView'
  AuthInfo:
    type: object
    properties:
      user_info:
        description: user's info
        $ref: '#/definitions/UserInfo'
      token:
        description: token
        $ref: '#/definitions/Token'