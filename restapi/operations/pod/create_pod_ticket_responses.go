// Code generated by go-swagger; DO NOT EDIT.

package pod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ez-deploy/ezdeploy/models"
)

// CreatePodTicketCreatedCode is the HTTP code returned for type CreatePodTicketCreated
const CreatePodTicketCreatedCode int = 201

/*CreatePodTicketCreated Create Pod Ticket Success, return pod ticket info.

swagger:response createPodTicketCreated
*/
type CreatePodTicketCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SSHPodTicket `json:"body,omitempty"`
}

// NewCreatePodTicketCreated creates CreatePodTicketCreated with default headers values
func NewCreatePodTicketCreated() *CreatePodTicketCreated {

	return &CreatePodTicketCreated{}
}

// WithPayload adds the payload to the create pod ticket created response
func (o *CreatePodTicketCreated) WithPayload(payload *models.SSHPodTicket) *CreatePodTicketCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create pod ticket created response
func (o *CreatePodTicketCreated) SetPayload(payload *models.SSHPodTicket) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePodTicketCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePodTicketForbiddenCode is the HTTP code returned for type CreatePodTicketForbidden
const CreatePodTicketForbiddenCode int = 403

/*CreatePodTicketForbidden Create Pod Ticket Failed, cause do not have permisssion

swagger:response createPodTicketForbidden
*/
type CreatePodTicketForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePodTicketForbidden creates CreatePodTicketForbidden with default headers values
func NewCreatePodTicketForbidden() *CreatePodTicketForbidden {

	return &CreatePodTicketForbidden{}
}

// WithPayload adds the payload to the create pod ticket forbidden response
func (o *CreatePodTicketForbidden) WithPayload(payload *models.Error) *CreatePodTicketForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create pod ticket forbidden response
func (o *CreatePodTicketForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePodTicketForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePodTicketInternalServerErrorCode is the HTTP code returned for type CreatePodTicketInternalServerError
const CreatePodTicketInternalServerErrorCode int = 500

/*CreatePodTicketInternalServerError Server Error

swagger:response createPodTicketInternalServerError
*/
type CreatePodTicketInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePodTicketInternalServerError creates CreatePodTicketInternalServerError with default headers values
func NewCreatePodTicketInternalServerError() *CreatePodTicketInternalServerError {

	return &CreatePodTicketInternalServerError{}
}

// WithPayload adds the payload to the create pod ticket internal server error response
func (o *CreatePodTicketInternalServerError) WithPayload(payload *models.Error) *CreatePodTicketInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create pod ticket internal server error response
func (o *CreatePodTicketInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePodTicketInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
