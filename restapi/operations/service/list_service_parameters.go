// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListServiceParams creates a new ListServiceParams object
//
// There are no default values defined in the spec.
func NewListServiceParams() ListServiceParams {

	return ListServiceParams{}
}

// ListServiceParams contains all the bound params for the list service operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListService
type ListServiceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	ProjectID *int64
	/*
	  In: query
	*/
	ServiceID *int64
	/*
	  In: query
	*/
	ServiceName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListServiceParams() beforehand.
func (o *ListServiceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qProjectID, qhkProjectID, _ := qs.GetOK("project_id")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qServiceID, qhkServiceID, _ := qs.GetOK("service_id")
	if err := o.bindServiceID(qServiceID, qhkServiceID, route.Formats); err != nil {
		res = append(res, err)
	}

	qServiceName, qhkServiceName, _ := qs.GetOK("service_name")
	if err := o.bindServiceName(qServiceName, qhkServiceName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *ListServiceParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("project_id", "query", "int64", raw)
	}
	o.ProjectID = &value

	return nil
}

// bindServiceID binds and validates parameter ServiceID from query.
func (o *ListServiceParams) bindServiceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("service_id", "query", "int64", raw)
	}
	o.ServiceID = &value

	return nil
}

// bindServiceName binds and validates parameter ServiceName from query.
func (o *ListServiceParams) bindServiceName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ServiceName = &raw

	return nil
}
