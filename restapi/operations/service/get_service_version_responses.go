// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ez-deploy/ezdeploy/models"
)

// GetServiceVersionOKCode is the HTTP code returned for type GetServiceVersionOK
const GetServiceVersionOKCode int = 200

/*GetServiceVersionOK List Service Version Success, return service version info.

swagger:response getServiceVersionOK
*/
type GetServiceVersionOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceVersion `json:"body,omitempty"`
}

// NewGetServiceVersionOK creates GetServiceVersionOK with default headers values
func NewGetServiceVersionOK() *GetServiceVersionOK {

	return &GetServiceVersionOK{}
}

// WithPayload adds the payload to the get service version o k response
func (o *GetServiceVersionOK) WithPayload(payload *models.ServiceVersion) *GetServiceVersionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service version o k response
func (o *GetServiceVersionOK) SetPayload(payload *models.ServiceVersion) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceVersionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceVersionForbiddenCode is the HTTP code returned for type GetServiceVersionForbidden
const GetServiceVersionForbiddenCode int = 403

/*GetServiceVersionForbidden List Service Version Failed, cause do not have permisssion

swagger:response getServiceVersionForbidden
*/
type GetServiceVersionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceVersionForbidden creates GetServiceVersionForbidden with default headers values
func NewGetServiceVersionForbidden() *GetServiceVersionForbidden {

	return &GetServiceVersionForbidden{}
}

// WithPayload adds the payload to the get service version forbidden response
func (o *GetServiceVersionForbidden) WithPayload(payload *models.Error) *GetServiceVersionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service version forbidden response
func (o *GetServiceVersionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceVersionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceVersionInternalServerErrorCode is the HTTP code returned for type GetServiceVersionInternalServerError
const GetServiceVersionInternalServerErrorCode int = 500

/*GetServiceVersionInternalServerError Server Error

swagger:response getServiceVersionInternalServerError
*/
type GetServiceVersionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceVersionInternalServerError creates GetServiceVersionInternalServerError with default headers values
func NewGetServiceVersionInternalServerError() *GetServiceVersionInternalServerError {

	return &GetServiceVersionInternalServerError{}
}

// WithPayload adds the payload to the get service version internal server error response
func (o *GetServiceVersionInternalServerError) WithPayload(payload *models.Error) *GetServiceVersionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service version internal server error response
func (o *GetServiceVersionInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceVersionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
