// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "apiserver",
    "title": "ez-deploy apiserver.",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/project/create": {
      "post": {
        "description": "Create Project",
        "tags": [
          "Project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Project Success, return project info.",
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          },
          "409": {
            "description": "Create Project Failed, cause project exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/project/get": {
      "get": {
        "description": "Get Project",
        "tags": [
          "Project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List All Projects Success, return project info. (project name, project id, project description)",
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          },
          "404": {
            "description": "Get Project Failed, cause project not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rbac/project/get": {
      "get": {
        "description": "Get Project RBAC",
        "tags": [
          "RBAC"
        ],
        "operationId": "GetProjectRBAC",
        "parameters": [
          {
            "type": "integer",
            "description": "projectID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List All Projects RBAC Success, return project RBAC info.",
            "schema": {
              "$ref": "#/definitions/ProjectRole"
            }
          },
          "403": {
            "description": "Get Project RBAC Failed, cause project not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rbac/user/get": {
      "get": {
        "description": "Get User RBAC",
        "tags": [
          "RBAC"
        ],
        "operationId": "GetUserRBAC",
        "responses": {
          "200": {
            "description": "List All Users RBAC Success, return user RBAC info.",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "404": {
            "description": "Get User RBAC Failed, cause user not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/create": {
      "post": {
        "description": "Create Service",
        "tags": [
          "Service"
        ],
        "operationId": "CreateService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Service Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Create Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create Service Failed, cause service exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/delete": {
      "delete": {
        "description": "Delete Service",
        "tags": [
          "Service"
        ],
        "operationId": "DeleteService",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Service Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Delete Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/list": {
      "get": {
        "description": "List Service by project ID, service ID, service name.",
        "tags": [
          "Service"
        ],
        "operationId": "ListService",
        "parameters": [
          {
            "type": "integer",
            "name": "project_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List All Services Success, return service info. (service name, service id, service description)",
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/pod/list": {
      "get": {
        "description": "List Service Pod by service ID.",
        "tags": [
          "Service"
        ],
        "operationId": "ListServicePod",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Pod Success, return service pod info.",
            "schema": {
              "type": "object",
              "properties": {
                "pods": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PodInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Pod Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/update/deploy": {
      "put": {
        "description": "Update Service Version",
        "tags": [
          "Service"
        ],
        "operationId": "UpdateServiceVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Service Version Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Update Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/update/desc": {
      "put": {
        "description": "Update Service Description",
        "tags": [
          "Service"
        ],
        "operationId": "UpdateServiceDescription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Service Description Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Update Service Description Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/create": {
      "post": {
        "description": "Create Service Version",
        "tags": [
          "Service"
        ],
        "operationId": "CreateServiceVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Service Version Success, return service version info.",
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          },
          "403": {
            "description": "Create Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create Service Version Failed, cause service version exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/get": {
      "get": {
        "description": "get Service Version by version ID.",
        "tags": [
          "Service"
        ],
        "operationId": "GetServiceVersion",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "version_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Version Success, return service version info.",
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          },
          "403": {
            "description": "List Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/list": {
      "get": {
        "description": "List Service Version by service ID.",
        "tags": [
          "Service"
        ],
        "operationId": "ListServiceVersion",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Version Success, return service version info.",
            "schema": {
              "type": "object",
              "properties": {
                "versions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceVersion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "security": [],
        "description": "Create User",
        "tags": [
          "Identity"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create User Success",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create User Failed, cause user exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/get": {
      "get": {
        "security": [],
        "description": "Get User Info by id",
        "tags": [
          "Identity"
        ],
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "integer",
            "description": "User id",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get User Success",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "description": "User Login",
        "tags": [
          "Identity"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login Success, return user info.",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            },
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Set-Cookie, set token"
              }
            }
          },
          "401": {
            "description": "Login Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "description": "Logout",
        "tags": [
          "Identity"
        ],
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "Logout Success"
          },
          "401": {
            "description": "Logout Failed, no login",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/visit/pod/ticket/check": {
      "get": {
        "security": [],
        "description": "Check Pod Ticket, and delete it",
        "tags": [
          "Pod"
        ],
        "operationId": "CheckPodTicket",
        "parameters": [
          {
            "type": "string",
            "name": "ticket_value",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Check Pod Ticket Success, return pod ticket info.",
            "schema": {
              "$ref": "#/definitions/SSHPodTicket"
            }
          },
          "403": {
            "description": "Check Pod Ticket Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/visit/pod/ticket/create": {
      "post": {
        "description": "Create Visit Pod Once Ticket",
        "tags": [
          "Pod"
        ],
        "operationId": "CreatePodTicket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pod_name": {
                  "description": "pod name",
                  "type": "string"
                },
                "project_id": {
                  "description": "project id",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Pod Ticket Success, return pod ticket info.",
            "schema": {
              "$ref": "#/definitions/SSHPodTicket"
            }
          },
          "403": {
            "description": "Create Pod Ticket Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/whoami": {
      "get": {
        "description": "Get Current User's Info",
        "tags": [
          "Identity"
        ],
        "operationId": "Whoami",
        "responses": {
          "200": {
            "description": "Get Current User's Info Success",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthInfo": {
      "type": "object",
      "properties": {
        "token": {
          "description": "token",
          "$ref": "#/definitions/Token"
        },
        "user_info": {
          "description": "user's info",
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "EnvironmentVariable": {
      "description": "Environment Variable for service deploy",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "environment variable name",
          "type": "string",
          "example": "foobar"
        },
        "service_id": {
          "description": "service id",
          "type": "integer",
          "example": 1
        },
        "value": {
          "description": "environment variable value",
          "type": "string",
          "example": "foobar"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "错误信息",
          "type": "string",
          "example": "error message"
        }
      }
    },
    "PodInfo": {
      "description": "Pod Object",
      "type": "object",
      "properties": {
        "age": {
          "description": "age of pod",
          "type": "string",
          "example": "1m"
        },
        "ip": {
          "description": "ip of pod",
          "type": "string",
          "example": "10.244.2.61"
        },
        "name": {
          "description": "unique name for pod",
          "type": "string",
          "example": "foobar-9zqb2"
        },
        "node": {
          "description": "node name",
          "type": "string",
          "example": "minikube-m03"
        },
        "restarts": {
          "description": "restart time",
          "type": "integer",
          "example": 0
        },
        "status": {
          "description": "pod status",
          "type": "string",
          "example": "Running"
        }
      }
    },
    "ProjectInfo": {
      "description": "Project Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "project description",
          "type": "string",
          "example": "foobar project"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "project name",
          "type": "string",
          "example": "foobar"
        },
        "owner_id": {
          "description": "owner's user_id",
          "type": "integer",
          "example": 1
        },
        "update_at": {
          "description": "update at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        }
      }
    },
    "ProjectRole": {
      "description": "Project Role Object",
      "type": "object",
      "properties": {
        "project_id": {
          "description": "project_id",
          "type": "integer",
          "example": 1
        },
        "roles": {
          "description": "roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        }
      }
    },
    "RoleInfo": {
      "description": "Authority Role Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "project_id": {
          "description": "project id",
          "type": "integer",
          "example": 1
        },
        "role": {
          "description": "role",
          "type": "string",
          "example": "admin"
        }
      }
    },
    "RoleMember": {
      "description": "Authority Role Member Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "role_id": {
          "description": "role id",
          "type": "integer",
          "example": 1
        },
        "user_id": {
          "description": "user id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RolePermission": {
      "description": "Role Permissions Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "permission": {
          "description": "permission",
          "type": "string",
          "enum": [
            "read",
            "write",
            "delete",
            "deploy"
          ]
        },
        "role_id": {
          "description": "AuthorityRole id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RoleView": {
      "description": "Authority Role View Object",
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/RoleInfo"
        },
        "members": {
          "description": "members",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleMember"
          }
        },
        "permissions": {
          "description": "permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermission"
          }
        }
      }
    },
    "SSHPodTicket": {
      "description": "SSH Pod Ticket Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "namespace_name": {
          "description": "namespace name",
          "type": "string",
          "example": "foobar"
        },
        "pod_name": {
          "description": "pod name",
          "type": "string",
          "example": "foobar-9zqb2"
        },
        "ticket": {
          "description": "ticket",
          "type": "string",
          "example": "AISBJFCOIZXUF=="
        },
        "user_id": {
          "description": "user id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "ServiceInfo": {
      "description": "Service Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "service description",
          "type": "string",
          "example": "foobar service"
        },
        "expose_type": {
          "description": "expose service or not",
          "type": "string",
          "enum": [
            "incluster",
            "nodeport",
            "none"
          ],
          "example": "service"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "in_cluster_port": {
          "description": "in-cluster expose port",
          "type": "integer",
          "example": 80
        },
        "name": {
          "description": "service name",
          "type": "string",
          "example": "foobar"
        },
        "node_port": {
          "description": "node-port expose port",
          "type": "integer",
          "example": 80
        },
        "project_id": {
          "description": "project id",
          "type": "integer",
          "example": 1
        },
        "replica": {
          "description": "number of pod replicas",
          "type": "integer",
          "example": 16
        },
        "running": {
          "description": "service is running or not",
          "type": "boolean",
          "example": false
        },
        "update_at": {
          "description": "update at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "version_id": {
          "description": "version id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "ServiceVersion": {
      "description": "Service Version Object",
      "type": "object",
      "properties": {
        "container_port": {
          "description": "container port",
          "type": "integer",
          "example": 80
        },
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "version description",
          "type": "string",
          "example": "foobar version"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "image": {
          "description": "image name",
          "type": "string",
          "example": "busybox:latest"
        },
        "name": {
          "description": "version name",
          "type": "string",
          "example": "foobar"
        },
        "service_id": {
          "description": "service id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Token": {
      "description": "Token Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "expired_at": {
          "description": "expired at, unix timestamp",
          "type": "integer",
          "example": 1528994200
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "type": {
          "description": "token type",
          "type": "string",
          "enum": [
            "session",
            "private",
            "public"
          ]
        },
        "update_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "user_id": {
          "description": "user's id",
          "type": "integer",
          "example": 1
        },
        "value": {
          "description": "token value",
          "type": "string",
          "example": "zxicgoiuasie"
        }
      }
    },
    "UserInfo": {
      "description": "User's Info",
      "type": "object",
      "properties": {
        "email": {
          "description": "email, unique",
          "type": "string",
          "example": "foo@bar.com"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "password": {
          "description": "password",
          "type": "string",
          "example": "foobar123"
        },
        "user_name": {
          "description": "user's name, not unique",
          "type": "string",
          "example": "foobar"
        }
      }
    },
    "UserRole": {
      "description": "User Role Object",
      "type": "object",
      "properties": {
        "roles": {
          "description": "roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        },
        "user_id": {
          "description": "user_id",
          "type": "integer",
          "example": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "apiserver",
    "title": "ez-deploy apiserver.",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/project/create": {
      "post": {
        "description": "Create Project",
        "tags": [
          "Project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Project Success, return project info.",
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          },
          "409": {
            "description": "Create Project Failed, cause project exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/project/get": {
      "get": {
        "description": "Get Project",
        "tags": [
          "Project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List All Projects Success, return project info. (project name, project id, project description)",
            "schema": {
              "$ref": "#/definitions/ProjectInfo"
            }
          },
          "404": {
            "description": "Get Project Failed, cause project not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rbac/project/get": {
      "get": {
        "description": "Get Project RBAC",
        "tags": [
          "RBAC"
        ],
        "operationId": "GetProjectRBAC",
        "parameters": [
          {
            "type": "integer",
            "description": "projectID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List All Projects RBAC Success, return project RBAC info.",
            "schema": {
              "$ref": "#/definitions/ProjectRole"
            }
          },
          "403": {
            "description": "Get Project RBAC Failed, cause project not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rbac/user/get": {
      "get": {
        "description": "Get User RBAC",
        "tags": [
          "RBAC"
        ],
        "operationId": "GetUserRBAC",
        "responses": {
          "200": {
            "description": "List All Users RBAC Success, return user RBAC info.",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "404": {
            "description": "Get User RBAC Failed, cause user not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/create": {
      "post": {
        "description": "Create Service",
        "tags": [
          "Service"
        ],
        "operationId": "CreateService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Service Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Create Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create Service Failed, cause service exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/delete": {
      "delete": {
        "description": "Delete Service",
        "tags": [
          "Service"
        ],
        "operationId": "DeleteService",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Service Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Delete Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/list": {
      "get": {
        "description": "List Service by project ID, service ID, service name.",
        "tags": [
          "Service"
        ],
        "operationId": "ListService",
        "parameters": [
          {
            "type": "integer",
            "name": "project_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "service_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "service_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List All Services Success, return service info. (service name, service id, service description)",
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/pod/list": {
      "get": {
        "description": "List Service Pod by service ID.",
        "tags": [
          "Service"
        ],
        "operationId": "ListServicePod",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Pod Success, return service pod info.",
            "schema": {
              "type": "object",
              "properties": {
                "pods": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PodInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Pod Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/update/deploy": {
      "put": {
        "description": "Update Service Version",
        "tags": [
          "Service"
        ],
        "operationId": "UpdateServiceVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Service Version Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Update Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/update/desc": {
      "put": {
        "description": "Update Service Description",
        "tags": [
          "Service"
        ],
        "operationId": "UpdateServiceDescription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update Service Description Success, return service info.",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "403": {
            "description": "Update Service Description Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/create": {
      "post": {
        "description": "Create Service Version",
        "tags": [
          "Service"
        ],
        "operationId": "CreateServiceVersion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Service Version Success, return service version info.",
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          },
          "403": {
            "description": "Create Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create Service Version Failed, cause service version exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/get": {
      "get": {
        "description": "get Service Version by version ID.",
        "tags": [
          "Service"
        ],
        "operationId": "GetServiceVersion",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "version_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Version Success, return service version info.",
            "schema": {
              "$ref": "#/definitions/ServiceVersion"
            }
          },
          "403": {
            "description": "List Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/version/list": {
      "get": {
        "description": "List Service Version by service ID.",
        "tags": [
          "Service"
        ],
        "operationId": "ListServiceVersion",
        "parameters": [
          {
            "type": "integer",
            "name": "service_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List Service Version Success, return service version info.",
            "schema": {
              "type": "object",
              "properties": {
                "versions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ServiceVersion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "List Service Version Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "security": [],
        "description": "Create User",
        "tags": [
          "Identity"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create User Success",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Create User Failed, cause user exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/get": {
      "get": {
        "security": [],
        "description": "Get User Info by id",
        "tags": [
          "Identity"
        ],
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "integer",
            "description": "User id",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get User Success",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "security": [],
        "description": "User Login",
        "tags": [
          "Identity"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login Success, return user info.",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            },
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Set-Cookie, set token"
              }
            }
          },
          "401": {
            "description": "Login Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "description": "Logout",
        "tags": [
          "Identity"
        ],
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "Logout Success"
          },
          "401": {
            "description": "Logout Failed, no login",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/visit/pod/ticket/check": {
      "get": {
        "security": [],
        "description": "Check Pod Ticket, and delete it",
        "tags": [
          "Pod"
        ],
        "operationId": "CheckPodTicket",
        "parameters": [
          {
            "type": "string",
            "name": "ticket_value",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Check Pod Ticket Success, return pod ticket info.",
            "schema": {
              "$ref": "#/definitions/SSHPodTicket"
            }
          },
          "403": {
            "description": "Check Pod Ticket Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/visit/pod/ticket/create": {
      "post": {
        "description": "Create Visit Pod Once Ticket",
        "tags": [
          "Pod"
        ],
        "operationId": "CreatePodTicket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pod_name": {
                  "description": "pod name",
                  "type": "string"
                },
                "project_id": {
                  "description": "project id",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create Pod Ticket Success, return pod ticket info.",
            "schema": {
              "$ref": "#/definitions/SSHPodTicket"
            }
          },
          "403": {
            "description": "Create Pod Ticket Failed, cause do not have permisssion",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/whoami": {
      "get": {
        "description": "Get Current User's Info",
        "tags": [
          "Identity"
        ],
        "operationId": "Whoami",
        "responses": {
          "200": {
            "description": "Get Current User's Info Success",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthInfo": {
      "type": "object",
      "properties": {
        "token": {
          "description": "token",
          "$ref": "#/definitions/Token"
        },
        "user_info": {
          "description": "user's info",
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "EnvironmentVariable": {
      "description": "Environment Variable for service deploy",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "environment variable name",
          "type": "string",
          "example": "foobar"
        },
        "service_id": {
          "description": "service id",
          "type": "integer",
          "example": 1
        },
        "value": {
          "description": "environment variable value",
          "type": "string",
          "example": "foobar"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "description": "错误信息",
          "type": "string",
          "example": "error message"
        }
      }
    },
    "PodInfo": {
      "description": "Pod Object",
      "type": "object",
      "properties": {
        "age": {
          "description": "age of pod",
          "type": "string",
          "example": "1m"
        },
        "ip": {
          "description": "ip of pod",
          "type": "string",
          "example": "10.244.2.61"
        },
        "name": {
          "description": "unique name for pod",
          "type": "string",
          "example": "foobar-9zqb2"
        },
        "node": {
          "description": "node name",
          "type": "string",
          "example": "minikube-m03"
        },
        "restarts": {
          "description": "restart time",
          "type": "integer",
          "example": 0
        },
        "status": {
          "description": "pod status",
          "type": "string",
          "example": "Running"
        }
      }
    },
    "ProjectInfo": {
      "description": "Project Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "project description",
          "type": "string",
          "example": "foobar project"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "project name",
          "type": "string",
          "example": "foobar"
        },
        "owner_id": {
          "description": "owner's user_id",
          "type": "integer",
          "example": 1
        },
        "update_at": {
          "description": "update at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        }
      }
    },
    "ProjectRole": {
      "description": "Project Role Object",
      "type": "object",
      "properties": {
        "project_id": {
          "description": "project_id",
          "type": "integer",
          "example": 1
        },
        "roles": {
          "description": "roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        }
      }
    },
    "RoleInfo": {
      "description": "Authority Role Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "project_id": {
          "description": "project id",
          "type": "integer",
          "example": 1
        },
        "role": {
          "description": "role",
          "type": "string",
          "example": "admin"
        }
      }
    },
    "RoleMember": {
      "description": "Authority Role Member Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "role_id": {
          "description": "role id",
          "type": "integer",
          "example": 1
        },
        "user_id": {
          "description": "user id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RolePermission": {
      "description": "Role Permissions Object",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "permission": {
          "description": "permission",
          "type": "string",
          "enum": [
            "read",
            "write",
            "delete",
            "deploy"
          ]
        },
        "role_id": {
          "description": "AuthorityRole id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RoleView": {
      "description": "Authority Role View Object",
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/RoleInfo"
        },
        "members": {
          "description": "members",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleMember"
          }
        },
        "permissions": {
          "description": "permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermission"
          }
        }
      }
    },
    "SSHPodTicket": {
      "description": "SSH Pod Ticket Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "namespace_name": {
          "description": "namespace name",
          "type": "string",
          "example": "foobar"
        },
        "pod_name": {
          "description": "pod name",
          "type": "string",
          "example": "foobar-9zqb2"
        },
        "ticket": {
          "description": "ticket",
          "type": "string",
          "example": "AISBJFCOIZXUF=="
        },
        "user_id": {
          "description": "user id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "ServiceInfo": {
      "description": "Service Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "service description",
          "type": "string",
          "example": "foobar service"
        },
        "expose_type": {
          "description": "expose service or not",
          "type": "string",
          "enum": [
            "incluster",
            "nodeport",
            "none"
          ],
          "example": "service"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "in_cluster_port": {
          "description": "in-cluster expose port",
          "type": "integer",
          "example": 80
        },
        "name": {
          "description": "service name",
          "type": "string",
          "example": "foobar"
        },
        "node_port": {
          "description": "node-port expose port",
          "type": "integer",
          "example": 80
        },
        "project_id": {
          "description": "project id",
          "type": "integer",
          "example": 1
        },
        "replica": {
          "description": "number of pod replicas",
          "type": "integer",
          "example": 16
        },
        "running": {
          "description": "service is running or not",
          "type": "boolean",
          "example": false
        },
        "update_at": {
          "description": "update at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "version_id": {
          "description": "version id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "ServiceVersion": {
      "description": "Service Version Object",
      "type": "object",
      "properties": {
        "container_port": {
          "description": "container port",
          "type": "integer",
          "example": 80
        },
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "description": {
          "description": "version description",
          "type": "string",
          "example": "foobar version"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "image": {
          "description": "image name",
          "type": "string",
          "example": "busybox:latest"
        },
        "name": {
          "description": "version name",
          "type": "string",
          "example": "foobar"
        },
        "service_id": {
          "description": "service id",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Token": {
      "description": "Token Object",
      "type": "object",
      "properties": {
        "create_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "expired_at": {
          "description": "expired at, unix timestamp",
          "type": "integer",
          "example": 1528994200
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "type": {
          "description": "token type",
          "type": "string",
          "enum": [
            "session",
            "private",
            "public"
          ]
        },
        "update_at": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "example": 1528894200
        },
        "user_id": {
          "description": "user's id",
          "type": "integer",
          "example": 1
        },
        "value": {
          "description": "token value",
          "type": "string",
          "example": "zxicgoiuasie"
        }
      }
    },
    "UserInfo": {
      "description": "User's Info",
      "type": "object",
      "properties": {
        "email": {
          "description": "email, unique",
          "type": "string",
          "example": "foo@bar.com"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "example": 1
        },
        "password": {
          "description": "password",
          "type": "string",
          "example": "foobar123"
        },
        "user_name": {
          "description": "user's name, not unique",
          "type": "string",
          "example": "foobar"
        }
      }
    },
    "UserRole": {
      "description": "User Role Object",
      "type": "object",
      "properties": {
        "roles": {
          "description": "roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        },
        "user_id": {
          "description": "user_id",
          "type": "integer",
          "example": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
