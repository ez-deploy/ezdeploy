// Code generated by go-swagger; DO NOT EDIT.
// Auto configures api handlers Implementations.

package restapi

import (
	"crypto/tls"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/ez-deploy/ezdeploy/handle"
	"github.com/ez-deploy/ezdeploy/models"
	"github.com/ez-deploy/ezdeploy/restapi/operations"
	"github.com/ez-deploy/ezdeploy/restapi/operations/identity"
	"github.com/ez-deploy/ezdeploy/restapi/operations/project"
	"github.com/ez-deploy/ezdeploy/restapi/operations/r_b_a_c"
	"github.com/ez-deploy/ezdeploy/restapi/operations/service"
)

//go:generate swagger generate server --target ../../ezdeploy --name EzDeployApiserver --spec ../swagger.yaml --implementation-package github.com/ez-deploy/ezdeploy/handle --principal github.com/ez-deploy/ezdeploy/models.AuthInfo

// This file auto configures the api backend implementation.
// handle package must already exist.
// handle.New() is implemented by user, and must return an object
// or interface that implements Handler interface defined below.
var Impl Handler = handle.New()

// Handler handles all api server backend configurations and requests
type Handler interface {
	Authable
	Configurable
	IdentityHandler
	ProjectHandler
	RbacHandler
	ServiceHandler
}

// Configurable handles all server configurations
type Configurable interface {
	ConfigureFlags(api *operations.EzDeployApiserverAPI)
	ConfigureTLS(tlsConfig *tls.Config)
	ConfigureServer(s *http.Server, scheme, addr string)
	CustomConfigure(api *operations.EzDeployApiserverAPI)
	SetupMiddlewares(handler http.Handler) http.Handler
	SetupGlobalMiddleware(handler http.Handler) http.Handler
}

// Authable handles server authentication
type Authable interface {
	// Applies when the "Cookie" header is set
	KeyAuth(token string) (*models.AuthInfo, error)
}

/* IdentityHandler  */
type IdentityHandler interface {
	/* CreateUser Create User */
	CreateUser(params identity.CreateUserParams) middleware.Responder
	/* Login User Login */
	Login(params identity.LoginParams) middleware.Responder
	/* Logout Logout */
	Logout(params identity.LogoutParams, principal *models.AuthInfo) middleware.Responder
	/* Whoami Get Current User's Info */
	Whoami(params identity.WhoamiParams, principal *models.AuthInfo) middleware.Responder
}

/* ProjectHandler  */
type ProjectHandler interface {
	/* CreateProject Create Project */
	CreateProject(params project.CreateProjectParams, principal *models.AuthInfo) middleware.Responder
	/* GetProject Get Project */
	GetProject(params project.GetProjectParams, principal *models.AuthInfo) middleware.Responder
}

/* RbacHandler  */
type RbacHandler interface {
	/* GetProjectRBAC Get Project RBAC */
	GetProjectRBAC(params r_b_a_c.GetProjectRBACParams, principal *models.AuthInfo) middleware.Responder
	/* GetUserRBAC Get User RBAC */
	GetUserRBAC(params r_b_a_c.GetUserRBACParams, principal *models.AuthInfo) middleware.Responder
}

/* ServiceHandler  */
type ServiceHandler interface {
	/* CreateService Create Service */
	CreateService(params service.CreateServiceParams, principal *models.AuthInfo) middleware.Responder
	/* CreateServiceVersion Create Service Version */
	CreateServiceVersion(params service.CreateServiceVersionParams, principal *models.AuthInfo) middleware.Responder
	/* DeleteService Delete Service */
	DeleteService(params service.DeleteServiceParams, principal *models.AuthInfo) middleware.Responder
	/* GetServiceVersion get Service Version by version ID. */
	GetServiceVersion(params service.GetServiceVersionParams, principal *models.AuthInfo) middleware.Responder
	/* ListService List Service by project ID, service ID, service name. */
	ListService(params service.ListServiceParams, principal *models.AuthInfo) middleware.Responder
	/* ListServicePod List Service Pod by service ID. */
	ListServicePod(params service.ListServicePodParams, principal *models.AuthInfo) middleware.Responder
	/* ListServiceVersion List Service Version by service ID. */
	ListServiceVersion(params service.ListServiceVersionParams, principal *models.AuthInfo) middleware.Responder
	/* UpdateServiceDescription Update Service Description */
	UpdateServiceDescription(params service.UpdateServiceDescriptionParams, principal *models.AuthInfo) middleware.Responder
	/* UpdateServiceVersion Update Service Version */
	UpdateServiceVersion(params service.UpdateServiceVersionParams, principal *models.AuthInfo) middleware.Responder
}

func configureFlags(api *operations.EzDeployApiserverAPI) {
	Impl.ConfigureFlags(api)
}

func configureAPI(api *operations.EzDeployApiserverAPI) http.Handler {

	api.ServeError = errors.ServeError

	api.UseSwaggerUI()

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	// Applies when the "Cookie" header is set
	api.KeyAuth = func(token string) (*models.AuthInfo, error) {
		return Impl.KeyAuth(token)
	}

	api.ProjectCreateProjectHandler = project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.CreateProject(params, principal)
	})
	api.ServiceCreateServiceHandler = service.CreateServiceHandlerFunc(func(params service.CreateServiceParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.CreateService(params, principal)
	})
	api.ServiceCreateServiceVersionHandler = service.CreateServiceVersionHandlerFunc(func(params service.CreateServiceVersionParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.CreateServiceVersion(params, principal)
	})
	api.IdentityCreateUserHandler = identity.CreateUserHandlerFunc(func(params identity.CreateUserParams) middleware.Responder {
		return Impl.CreateUser(params)
	})
	api.ServiceDeleteServiceHandler = service.DeleteServiceHandlerFunc(func(params service.DeleteServiceParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.DeleteService(params, principal)
	})
	api.ProjectGetProjectHandler = project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.GetProject(params, principal)
	})
	api.RbacGetProjectRBACHandler = r_b_a_c.GetProjectRBACHandlerFunc(func(params r_b_a_c.GetProjectRBACParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.GetProjectRBAC(params, principal)
	})
	api.ServiceGetServiceVersionHandler = service.GetServiceVersionHandlerFunc(func(params service.GetServiceVersionParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.GetServiceVersion(params, principal)
	})
	api.RbacGetUserRBACHandler = r_b_a_c.GetUserRBACHandlerFunc(func(params r_b_a_c.GetUserRBACParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.GetUserRBAC(params, principal)
	})
	api.ServiceListServiceHandler = service.ListServiceHandlerFunc(func(params service.ListServiceParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.ListService(params, principal)
	})
	api.ServiceListServicePodHandler = service.ListServicePodHandlerFunc(func(params service.ListServicePodParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.ListServicePod(params, principal)
	})
	api.ServiceListServiceVersionHandler = service.ListServiceVersionHandlerFunc(func(params service.ListServiceVersionParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.ListServiceVersion(params, principal)
	})
	api.IdentityLoginHandler = identity.LoginHandlerFunc(func(params identity.LoginParams) middleware.Responder {
		return Impl.Login(params)
	})
	api.IdentityLogoutHandler = identity.LogoutHandlerFunc(func(params identity.LogoutParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.Logout(params, principal)
	})
	api.ServiceUpdateServiceDescriptionHandler = service.UpdateServiceDescriptionHandlerFunc(func(params service.UpdateServiceDescriptionParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.UpdateServiceDescription(params, principal)
	})
	api.ServiceUpdateServiceVersionHandler = service.UpdateServiceVersionHandlerFunc(func(params service.UpdateServiceVersionParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.UpdateServiceVersion(params, principal)
	})
	api.IdentityWhoamiHandler = identity.WhoamiHandlerFunc(func(params identity.WhoamiParams, principal *models.AuthInfo) middleware.Responder {
		return Impl.Whoami(params, principal)
	})

	api.PreServerShutdown = func() {}

	api.ServerShutdown = func() {}

	// CustomConfigure can override or add to configurations set above
	Impl.CustomConfigure(api)

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
	Impl.ConfigureTLS(tlsConfig)
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
	Impl.ConfigureServer(s, scheme, addr)
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return Impl.SetupMiddlewares(handler)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return Impl.SetupGlobalMiddleware(handler)
}
