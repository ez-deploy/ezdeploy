// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ez-deploy/ezdeploy/models"
)

// ListServicePodReader is a Reader for the ListServicePod structure.
type ListServicePodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListServicePodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListServicePodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListServicePodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListServicePodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListServicePodOK creates a ListServicePodOK with default headers values
func NewListServicePodOK() *ListServicePodOK {
	return &ListServicePodOK{}
}

/* ListServicePodOK describes a response with status code 200, with default header values.

List Service Pod Success, return service pod info.
*/
type ListServicePodOK struct {
	Payload *ListServicePodOKBody
}

func (o *ListServicePodOK) Error() string {
	return fmt.Sprintf("[GET /service/pod/list][%d] listServicePodOK  %+v", 200, o.Payload)
}
func (o *ListServicePodOK) GetPayload() *ListServicePodOKBody {
	return o.Payload
}

func (o *ListServicePodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListServicePodOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServicePodForbidden creates a ListServicePodForbidden with default headers values
func NewListServicePodForbidden() *ListServicePodForbidden {
	return &ListServicePodForbidden{}
}

/* ListServicePodForbidden describes a response with status code 403, with default header values.

List Service Pod Failed, cause do not have permisssion
*/
type ListServicePodForbidden struct {
	Payload *models.Error
}

func (o *ListServicePodForbidden) Error() string {
	return fmt.Sprintf("[GET /service/pod/list][%d] listServicePodForbidden  %+v", 403, o.Payload)
}
func (o *ListServicePodForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListServicePodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServicePodInternalServerError creates a ListServicePodInternalServerError with default headers values
func NewListServicePodInternalServerError() *ListServicePodInternalServerError {
	return &ListServicePodInternalServerError{}
}

/* ListServicePodInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ListServicePodInternalServerError struct {
	Payload *models.Error
}

func (o *ListServicePodInternalServerError) Error() string {
	return fmt.Sprintf("[GET /service/pod/list][%d] listServicePodInternalServerError  %+v", 500, o.Payload)
}
func (o *ListServicePodInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListServicePodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListServicePodOKBody list service pod o k body
swagger:model ListServicePodOKBody
*/
type ListServicePodOKBody struct {

	// pods
	Pods []*models.PodInfo `json:"pods"`
}

// Validate validates this list service pod o k body
func (o *ListServicePodOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListServicePodOKBody) validatePods(formats strfmt.Registry) error {
	if swag.IsZero(o.Pods) { // not required
		return nil
	}

	for i := 0; i < len(o.Pods); i++ {
		if swag.IsZero(o.Pods[i]) { // not required
			continue
		}

		if o.Pods[i] != nil {
			if err := o.Pods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listServicePodOK" + "." + "pods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listServicePodOK" + "." + "pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list service pod o k body based on the context it is used
func (o *ListServicePodOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListServicePodOKBody) contextValidatePods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Pods); i++ {

		if o.Pods[i] != nil {
			if err := o.Pods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listServicePodOK" + "." + "pods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listServicePodOK" + "." + "pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListServicePodOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListServicePodOKBody) UnmarshalBinary(b []byte) error {
	var res ListServicePodOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
