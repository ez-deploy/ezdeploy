// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ez-deploy/ezdeploy/models"
)

// UpdateServiceVersionReader is a Reader for the UpdateServiceVersion structure.
type UpdateServiceVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateServiceVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServiceVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateServiceVersionOK creates a UpdateServiceVersionOK with default headers values
func NewUpdateServiceVersionOK() *UpdateServiceVersionOK {
	return &UpdateServiceVersionOK{}
}

/* UpdateServiceVersionOK describes a response with status code 200, with default header values.

Update Service Version Success, return service info.
*/
type UpdateServiceVersionOK struct {
	Payload *models.ServiceInfo
}

func (o *UpdateServiceVersionOK) Error() string {
	return fmt.Sprintf("[PUT /service/update/deploy][%d] updateServiceVersionOK  %+v", 200, o.Payload)
}
func (o *UpdateServiceVersionOK) GetPayload() *models.ServiceInfo {
	return o.Payload
}

func (o *UpdateServiceVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceVersionForbidden creates a UpdateServiceVersionForbidden with default headers values
func NewUpdateServiceVersionForbidden() *UpdateServiceVersionForbidden {
	return &UpdateServiceVersionForbidden{}
}

/* UpdateServiceVersionForbidden describes a response with status code 403, with default header values.

Update Service Version Failed, cause do not have permisssion
*/
type UpdateServiceVersionForbidden struct {
	Payload *models.Error
}

func (o *UpdateServiceVersionForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/update/deploy][%d] updateServiceVersionForbidden  %+v", 403, o.Payload)
}
func (o *UpdateServiceVersionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceVersionInternalServerError creates a UpdateServiceVersionInternalServerError with default headers values
func NewUpdateServiceVersionInternalServerError() *UpdateServiceVersionInternalServerError {
	return &UpdateServiceVersionInternalServerError{}
}

/* UpdateServiceVersionInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateServiceVersionInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateServiceVersionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /service/update/deploy][%d] updateServiceVersionInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateServiceVersionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
