// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateService(params *CreateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCreated, error)

	CreateServiceVersion(params *CreateServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceVersionCreated, error)

	DeleteService(params *DeleteServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceOK, error)

	GetServiceVersion(params *GetServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceVersionOK, error)

	ListService(params *ListServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceOK, error)

	ListServicePod(params *ListServicePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicePodOK, error)

	ListServiceVersion(params *ListServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceVersionOK, error)

	UpdateServiceDescription(params *UpdateServiceDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceDescriptionOK, error)

	UpdateServiceVersion(params *UpdateServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateService Create Service
*/
func (a *Client) CreateService(params *CreateServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateService",
		Method:             "POST",
		PathPattern:        "/service/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateServiceVersion Create Service Version
*/
func (a *Client) CreateServiceVersion(params *CreateServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateServiceVersion",
		Method:             "POST",
		PathPattern:        "/service/version/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateServiceVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteService Delete Service
*/
func (a *Client) DeleteService(params *DeleteServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteService",
		Method:             "DELETE",
		PathPattern:        "/service/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceVersion get Service Version by version ID.
*/
func (a *Client) GetServiceVersion(params *GetServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServiceVersion",
		Method:             "GET",
		PathPattern:        "/service/version/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServiceVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListService List Service by project ID, service ID, service name.
*/
func (a *Client) ListService(params *ListServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListService",
		Method:             "GET",
		PathPattern:        "/service/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListServicePod List Service Pod by service ID.
*/
func (a *Client) ListServicePod(params *ListServicePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServicePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicePodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServicePod",
		Method:             "GET",
		PathPattern:        "/service/pod/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicePodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListServicePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListServiceVersion List Service Version by service ID.
*/
func (a *Client) ListServiceVersion(params *ListServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServiceVersion",
		Method:             "GET",
		PathPattern:        "/service/version/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServiceVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListServiceVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceDescription Update Service Description
*/
func (a *Client) UpdateServiceDescription(params *UpdateServiceDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateServiceDescription",
		Method:             "PUT",
		PathPattern:        "/service/update/desc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateServiceDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateServiceVersion Update Service Version
*/
func (a *Client) UpdateServiceVersion(params *UpdateServiceVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateServiceVersion",
		Method:             "PUT",
		PathPattern:        "/service/update/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateServiceVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
