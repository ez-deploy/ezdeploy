// Code generated by go-swagger; DO NOT EDIT.

package r_b_a_c

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ez-deploy/ezdeploy/models"
)

// GetUserRBACReader is a Reader for the GetUserRBAC structure.
type GetUserRBACReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserRBACReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserRBACOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetUserRBACNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserRBACInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserRBACOK creates a GetUserRBACOK with default headers values
func NewGetUserRBACOK() *GetUserRBACOK {
	return &GetUserRBACOK{}
}

/* GetUserRBACOK describes a response with status code 200, with default header values.

List All Users RBAC Success, return user RBAC info.
*/
type GetUserRBACOK struct {
	Payload *models.UserRole
}

func (o *GetUserRBACOK) Error() string {
	return fmt.Sprintf("[GET /rbac/user/get][%d] getUserRBACOK  %+v", 200, o.Payload)
}
func (o *GetUserRBACOK) GetPayload() *models.UserRole {
	return o.Payload
}

func (o *GetUserRBACOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRBACNotFound creates a GetUserRBACNotFound with default headers values
func NewGetUserRBACNotFound() *GetUserRBACNotFound {
	return &GetUserRBACNotFound{}
}

/* GetUserRBACNotFound describes a response with status code 404, with default header values.

Get User RBAC Failed, cause user not exist
*/
type GetUserRBACNotFound struct {
	Payload *models.Error
}

func (o *GetUserRBACNotFound) Error() string {
	return fmt.Sprintf("[GET /rbac/user/get][%d] getUserRBACNotFound  %+v", 404, o.Payload)
}
func (o *GetUserRBACNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserRBACNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRBACInternalServerError creates a GetUserRBACInternalServerError with default headers values
func NewGetUserRBACInternalServerError() *GetUserRBACInternalServerError {
	return &GetUserRBACInternalServerError{}
}

/* GetUserRBACInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetUserRBACInternalServerError struct {
	Payload *models.Error
}

func (o *GetUserRBACInternalServerError) Error() string {
	return fmt.Sprintf("[GET /rbac/user/get][%d] getUserRBACInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUserRBACInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserRBACInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
