// Code generated by go-swagger; DO NOT EDIT.

package r_b_a_c

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ez-deploy/ezdeploy/models"
)

// GetProjectRBACReader is a Reader for the GetProjectRBAC structure.
type GetProjectRBACReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectRBACReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectRBACOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetProjectRBACForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectRBACInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProjectRBACOK creates a GetProjectRBACOK with default headers values
func NewGetProjectRBACOK() *GetProjectRBACOK {
	return &GetProjectRBACOK{}
}

/* GetProjectRBACOK describes a response with status code 200, with default header values.

List All Projects RBAC Success, return project RBAC info.
*/
type GetProjectRBACOK struct {
	Payload *models.ProjectRole
}

func (o *GetProjectRBACOK) Error() string {
	return fmt.Sprintf("[GET /rbac/project/get][%d] getProjectRBACOK  %+v", 200, o.Payload)
}
func (o *GetProjectRBACOK) GetPayload() *models.ProjectRole {
	return o.Payload
}

func (o *GetProjectRBACOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectRBACForbidden creates a GetProjectRBACForbidden with default headers values
func NewGetProjectRBACForbidden() *GetProjectRBACForbidden {
	return &GetProjectRBACForbidden{}
}

/* GetProjectRBACForbidden describes a response with status code 403, with default header values.

Get Project RBAC Failed, cause project not exist
*/
type GetProjectRBACForbidden struct {
	Payload *models.Error
}

func (o *GetProjectRBACForbidden) Error() string {
	return fmt.Sprintf("[GET /rbac/project/get][%d] getProjectRBACForbidden  %+v", 403, o.Payload)
}
func (o *GetProjectRBACForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProjectRBACForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectRBACInternalServerError creates a GetProjectRBACInternalServerError with default headers values
func NewGetProjectRBACInternalServerError() *GetProjectRBACInternalServerError {
	return &GetProjectRBACInternalServerError{}
}

/* GetProjectRBACInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetProjectRBACInternalServerError struct {
	Payload *models.Error
}

func (o *GetProjectRBACInternalServerError) Error() string {
	return fmt.Sprintf("[GET /rbac/project/get][%d] getProjectRBACInternalServerError  %+v", 500, o.Payload)
}
func (o *GetProjectRBACInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProjectRBACInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
