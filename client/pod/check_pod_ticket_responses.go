// Code generated by go-swagger; DO NOT EDIT.

package pod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ez-deploy/ezdeploy/models"
)

// CheckPodTicketReader is a Reader for the CheckPodTicket structure.
type CheckPodTicketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckPodTicketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckPodTicketOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCheckPodTicketForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckPodTicketInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckPodTicketOK creates a CheckPodTicketOK with default headers values
func NewCheckPodTicketOK() *CheckPodTicketOK {
	return &CheckPodTicketOK{}
}

/* CheckPodTicketOK describes a response with status code 200, with default header values.

Check Pod Ticket Success, return pod ticket info.
*/
type CheckPodTicketOK struct {
	Payload *models.SSHPodTicket
}

func (o *CheckPodTicketOK) Error() string {
	return fmt.Sprintf("[GET /visit/pod/ticket/check][%d] checkPodTicketOK  %+v", 200, o.Payload)
}
func (o *CheckPodTicketOK) GetPayload() *models.SSHPodTicket {
	return o.Payload
}

func (o *CheckPodTicketOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SSHPodTicket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPodTicketForbidden creates a CheckPodTicketForbidden with default headers values
func NewCheckPodTicketForbidden() *CheckPodTicketForbidden {
	return &CheckPodTicketForbidden{}
}

/* CheckPodTicketForbidden describes a response with status code 403, with default header values.

Check Pod Ticket Failed, cause do not have permisssion
*/
type CheckPodTicketForbidden struct {
	Payload *models.Error
}

func (o *CheckPodTicketForbidden) Error() string {
	return fmt.Sprintf("[GET /visit/pod/ticket/check][%d] checkPodTicketForbidden  %+v", 403, o.Payload)
}
func (o *CheckPodTicketForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPodTicketForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPodTicketInternalServerError creates a CheckPodTicketInternalServerError with default headers values
func NewCheckPodTicketInternalServerError() *CheckPodTicketInternalServerError {
	return &CheckPodTicketInternalServerError{}
}

/* CheckPodTicketInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckPodTicketInternalServerError struct {
	Payload *models.Error
}

func (o *CheckPodTicketInternalServerError) Error() string {
	return fmt.Sprintf("[GET /visit/pod/ticket/check][%d] checkPodTicketInternalServerError  %+v", 500, o.Payload)
}
func (o *CheckPodTicketInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPodTicketInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
